The perfect data structure for storing this data could be a Python list comprehension nested within a dictionary comprehension:


cities = ['Austin', 'Tacoma', 'Topeka', 'Sacramento', 'Charlotte']
temps = {city: [0 for _ in range(7)] for city in cities}
temps
{
    'Austin': [0, 0, 0, 0, 0, 0, 0],
    'Tacoma': [0, 0, 0, 0, 0, 0, 0],
    'Topeka': [0, 0, 0, 0, 0, 0, 0],
    'Sacramento': [0, 0, 0, 0, 0, 0, 0],
    'Charlotte': [0, 0, 0, 0, 0, 0, 0]
}

/*
Nested lists are a common way to create matrices, which are often used for mathematical purposes. Take a look at the code block below:


matrix = [[i for i in range(5)] for _ in range(6)]
matrix
[
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4],
    [0, 1, 2, 3, 4]
]


Take this example, which uses a nested list comprehension to flatten a matrix:


matrix = [
    [0, 0, 0],
    [1, 1, 1],
    [2, 2, 2],
]
flat = [num for row in matrix for num in row]
flat
[0, 0, 0, 1, 1, 1, 2, 2, 2]


On the other hand, if you were to use for loops to flatten the same matrix, then your code will be much more straightforward:


matrix = [
    [0, 0, 0],
    [1, 1, 1],
    [2, 2, 2],
]
flat = []
for row in matrix:
    for num in row:
        flat.append(num)

flat
[0, 0, 0, 1, 1, 1, 2, 2, 2]


sum the squares of the first one-thousand integers, then a list comprehension will solve this problem admirably:


sum([i * i for i in range(1000)])
332833500


The example below uses a generator:


sum(i * i for i in range(1000000000))
333333332833333333500000000


map() also operates lazily, meaning memory wonâ€™t be an issue if you choose to use it in this case:


sum(map(lambda i: i*i, range(1000000000)))
333333332833333333500000000


You can use timeit to compare the runtime of map(), for loops, and list comprehensions:


import random
import timeit
TAX_RATE = .08
txns = [random.randrange(100) for _ in range(100000)]
def get_price(txn):
    return txn * (1 + TAX_RATE)

def get_prices_with_map():
    return list(map(get_price, txns))

def get_prices_with_comprehension():
    return [get_price(txn) for txn in txns]

def get_prices_with_loop():
    prices = []
    for txn in txns:
        prices.append(get_price(txn))
    return prices

timeit.timeit(get_prices_with_map, number=100)
2.0554370979998566
timeit.timeit(get_prices_with_comprehension, number=100)
2.3982384680002724
timeit.timeit(get_prices_with_loop, number=100)
3.0531821520007725
*/